"""
Aplicaci√≥n principal de respaldos SQL con detecci√≥n autom√°tica de herramientas.
Versi√≥n mejorada que detecta qu√© motores de BD est√°n disponibles.
"""

import tkinter as tk
from tkinter import ttk, messagebox
import os
import sys
from pathlib import Path

# Agregar el directorio actual al path para imports
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

# Imports del sistema de respaldos
from src.main import BackupApp
from src.utils.db_tools_checker import DatabaseToolsChecker, show_database_status_dialog
from config.settings import UI_CONFIG


class BackupApplicationWrapper:
    """Wrapper de la aplicaci√≥n principal con validaci√≥n de herramientas."""
    
    def __init__(self):
        self.root = None
        self.main_app = None
        self.available_tools = {}
        
    def initialize(self):
        """Inicializa la aplicaci√≥n con verificaci√≥n de herramientas."""
        # Crear ventana principal
        self.root = tk.Tk()
        self.root.title("üóÑÔ∏è Sistema de Respaldos SQL Multi-Motor")
        self.root.geometry("1200x900")
        self.root.minsize(1000, 700)
        
        # Configurar estilo
        self._configure_styles()
        
        # Verificar herramientas disponibles
        self._check_available_tools()
        
        # Mostrar splash screen con informaci√≥n de herramientas
        self._show_startup_info()
        
        # Crear aplicaci√≥n principal
        try:
            self.main_app = BackupApp(self.root)
            self.root.protocol("WM_DELETE_WINDOW", self._on_closing)
            
            # Agregar men√∫ de herramientas
            self._add_tools_menu()
            
        except Exception as e:
            messagebox.showerror("Error de Inicializaci√≥n", 
                               f"Error iniciando la aplicaci√≥n: {e}")
            self.root.destroy()
            return False
        
        return True
    
    def _configure_styles(self):
        """Configura los estilos de la aplicaci√≥n."""
        style = ttk.Style()
        
        # Tema general
        if 'clam' in style.theme_names():
            style.theme_use('clam')
        
        # Estilos personalizados
        style.configure('Header.TLabel', 
                       font=('Arial', 16, 'bold'),
                       background=UI_CONFIG['colors']['surface'])
        
        style.configure('Info.TLabel',
                       font=('Arial', 10),
                       background=UI_CONFIG['colors']['surface'])
    
    def _check_available_tools(self):
        """Verifica qu√© herramientas de BD est√°n disponibles."""
        print("üîç Verificando herramientas de base de datos...")
        self.available_tools = DatabaseToolsChecker.get_available_db_types()
        
        available_count = sum(1 for tool in self.available_tools.values() if tool['available'])
        print(f"üìä Herramientas disponibles: {available_count}/{len(self.available_tools)}")
        
        for db_type, info in self.available_tools.items():
            status = "‚úÖ" if info['available'] else "‚ùå"
            print(f"   {status} {info['name']}: {info['message']}")
    
    def _show_startup_info(self):
        """Muestra informaci√≥n de startup sobre herramientas disponibles."""
        available_dbs = [info['name'] for info in self.available_tools.values() if info['available']]
        missing_dbs = [info['name'] for info in self.available_tools.values() if not info['available']]
        
        if not available_dbs:
            # No hay herramientas disponibles
            result = messagebox.askyesno(
                "Sin Herramientas de BD",
                "‚ö†Ô∏è No se detectaron herramientas de base de datos instaladas.\\n\\n"
                "La aplicaci√≥n puede ejecutarse, pero no podr√° crear respaldos reales.\\n\\n"
                "¬øDesea ver las instrucciones de instalaci√≥n?",
                icon='warning'
            )
            if result:
                show_database_status_dialog(self.root)
        
        elif missing_dbs:
            # Algunas herramientas disponibles, algunas faltantes
            available_str = ", ".join(available_dbs)
            missing_str = ", ".join(missing_dbs)
            
            result = messagebox.askyesno(
                "Herramientas Parcialmente Disponibles",
                f"‚úÖ Disponibles: {available_str}\\n"
                f"‚ùå Faltantes: {missing_str}\\n\\n"
                "¬øDesea ver instrucciones para instalar las herramientas faltantes?",
                icon='info'
            )
            if result:
                show_database_status_dialog(self.root)
        
        else:
            # Todas las herramientas disponibles
            messagebox.showinfo(
                "Sistema Listo",
                f"üéâ Todas las herramientas est√°n disponibles:\\n"
                f"‚úÖ {', '.join(available_dbs)}\\n\\n"
                "El sistema est√° listo para crear respaldos.",
                icon='info'
            )
    
    def _add_tools_menu(self):
        """Agrega men√∫ de herramientas a la ventana principal."""
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        # Men√∫ Herramientas
        tools_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="üîß Herramientas", menu=tools_menu)
        
        tools_menu.add_command(
            label="üìä Estado de Herramientas BD",
            command=lambda: show_database_status_dialog(self.root)
        )
        
        tools_menu.add_separator()
        
        tools_menu.add_command(
            label="üìÅ Abrir Carpeta de Respaldos",
            command=self._open_backup_folder
        )
        
        tools_menu.add_command(
            label="üß™ Ejecutar Diagn√≥stico",
            command=self._run_diagnostics
        )
        
        # Men√∫ Ayuda
        help_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="‚ùì Ayuda", menu=help_menu)
        
        help_menu.add_command(
            label="üìñ Acerca de",
            command=self._show_about
        )
    
    def _open_backup_folder(self):
        """Abre la carpeta de respaldos en el explorador."""
        backup_path = "C:\\Respaldos_Test"  # Ruta por defecto de las pruebas
        
        if os.path.exists(backup_path):
            os.startfile(backup_path)
        else:
            messagebox.showinfo("Carpeta de Respaldos", 
                               f"La carpeta de respaldos no existe a√∫n.\\n"
                               f"Se crear√° autom√°ticamente cuando ejecute el primer respaldo.\\n\\n"
                               f"Ruta: {backup_path}")
    
    def _run_diagnostics(self):
        """Ejecuta el script de diagn√≥stico."""
        try:
            import subprocess
            script_path = current_dir / "diagnostico_detallado_respaldos.py"
            
            if script_path.exists():
                subprocess.Popen([sys.executable, str(script_path)], 
                               creationflags=subprocess.CREATE_NEW_CONSOLE)
                messagebox.showinfo("Diagn√≥stico", 
                                   "Script de diagn√≥stico ejecutado en nueva ventana.")
            else:
                messagebox.showerror("Error", 
                                   f"Script de diagn√≥stico no encontrado: {script_path}")
        except Exception as e:
            messagebox.showerror("Error", f"Error ejecutando diagn√≥stico: {e}")
    
    def _show_about(self):
        """Muestra informaci√≥n sobre la aplicaci√≥n."""
        about_text = f"""üóÑÔ∏è Sistema de Respaldos SQL Multi-Motor
        
Versi√≥n: 2.0
Fecha: Julio 2025

Caracter√≠sticas:
‚Ä¢ Soporte para SQL Server, MySQL, PostgreSQL
‚Ä¢ Respaldos programados autom√°ticos
‚Ä¢ Organizaci√≥n autom√°tica por tipo de BD
‚Ä¢ Historial de conexiones
‚Ä¢ Logs detallados y exportables
‚Ä¢ Interfaz moderna y responsive

Estado de Herramientas:"""

        for db_type, info in self.available_tools.items():
            status = "‚úÖ" if info['available'] else "‚ùå"
            about_text += f"\\n{status} {info['name']}"

        about_text += f"""

Desarrollado para gesti√≥n profesional de respaldos.
        
üìÅ Carpeta de respaldos: C:\\Respaldos_Test"""

        messagebox.showinfo("Acerca de", about_text)
    
    def _on_closing(self):
        """Maneja el cierre de la aplicaci√≥n."""
        if messagebox.askokcancel("Salir", "¬øEst√° seguro que desea salir?"):
            # Detener cualquier programador activo
            if self.main_app and hasattr(self.main_app, 'controller'):
                self.main_app.controller.stop_scheduler()
            
            self.root.destroy()
    
    def run(self):
        """Ejecuta la aplicaci√≥n."""
        if self.initialize():
            print("üöÄ Iniciando aplicaci√≥n de respaldos...")
            self.root.mainloop()
        else:
            print("‚ùå Error inicializando la aplicaci√≥n")


def main():
    """Funci√≥n principal."""
    print("=" * 60)
    print("üóÑÔ∏è SISTEMA DE RESPALDOS SQL MULTI-MOTOR")
    print("=" * 60)
    print("Inicializando aplicaci√≥n...")
    
    try:
        app = BackupApplicationWrapper()
        app.run()
    except KeyboardInterrupt:
        print("\\nüõë Aplicaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"‚ùå Error fatal: {e}")
        messagebox.showerror("Error Fatal", f"Error inesperado: {e}")
    finally:
        print("üëã Aplicaci√≥n finalizada")


if __name__ == "__main__":
    main()
